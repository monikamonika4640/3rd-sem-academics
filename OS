#include<stdio.h>
#include<conio.h> 
main()
{
int bt[20], wt[20], tat[20], i, n; 
float wtavg, tatavg;
clrscr();
printf("\nEnter the number of processes -- "); 
scanf("%d", &n);
for(i=0;i<n;i++)
{
printf("\nEnter Burst Time for Process %d -- ", i); 
scanf("%d", &bt[i]);
}
wt[0] = wtavg = 0; 
tat[0] = tatavg = bt[0]; 
for(i=1;i<n;i++)
{
wt[i] = wt[i-1] +bt[i-1];
tat[i] = tat[i-1] +bt[i]; 
wtavg = wtavg + wt[i]; 
tatavg = tatavg + tat[i];
}
printf("\t PROCESS \tBURST TIME \t WAITING TIME\t TURNAROUND TIME\n");
for(i=0;i<n;i++)
printf("\n\t P%d \t\t %d \t\t %d \t\t %d", i, bt[i], wt[i], tat[i]); 
printf("\nAverage Waiting Time -- %f", wtavg/n);
printf("\nAverage Turnaround Time -- %f", tatavg/n); 
getch()
}

#include<stdio.h> 
#include<conio.h> 
main()
{
int p[20], bt[20], wt[20], tat[20], i, k, n, temp; float wtavg, 
tatavg;
clrscr();
printf("\nEnter the number of processes -- "); 
scanf("%d", &n);
for(i=0;i<n;i++)
{
p[i]=i;
printf("Enter Burst Time for Process %d -- ", i); 
scanf("%d", &bt[i]);
}
for(i=0;i<n;i++) 
for(k=i+1;k<n;k++) 
if(bt[i]>bt[k])
{
temp=bt[i]; 
bt[i]=bt[k]; 
bt[k]=temp;
temp=p[i]; 
p[i]=p[k]; 
p[k]=temp;
}
wt[0] = wtavg = 0;
tat[0] = tatavg = bt[0]; for(i=1;i<n;i++)
{
wt[i] = wt[i-1] +bt[i-1];
tat[i] = tat[i-1] +bt[i]; 
wtavg = wtavg + wt[i]; 
tatavg = tatavg + tat[i];
}
printf("\n\t PROCESS \tBURST TIME \t WAITING TIME\t TURNAROUND TIME\n");
for(i=0;i<n;i++)
printf("\n\t P%d \t\t %d \t\t %d \t\t %d", p[i], bt[i], wt[i], tat[i]); 
printf("\nAverage Waiting Time -- %f", wtavg/n);
printf("\nAverage Turnaround Time -- %f", tatavg/n); getch();}

#include<stdio.h> 
main()
{
int i,j,n,bu[10],wa[10],tat[10],t,ct[10],max; 
float awt=0,att=0,temp=0;
clrscr();
printf("Enter the no of processes -- "); 
scanf("%d",&n);
for(i=0;i<n;i++)
{
printf("\nEnter Burst Time for process %d -- ", i+1); 
scanf("%d",&bu[i]);
ct[i]=bu[i];
}
printf("\nEnter the size of time slice -- "); 
scanf("%d",&t);
max=bu[0]; 
for(i=1;i<n;i++) 
if(max<bu[i]) 
max=bu[i]; 
for(j=0;j<(max/t)+1;j++) 
for(i=0;i<n;i++) 
if(bu[i]!=0)
if(bu[i]<=t) {
tat[i]=temp+bu[i]; 
temp=temp+bu[i]; 
bu[i]=0;
}
else {
bu[i]=bu[i]-t; 
temp=temp+t;
}
for(i=0;i<n;i++){
wa[i]=tat[i]-
ct[i]; att+=tat[i]; 
awt+=wa[i];}
printf("\nThe Average Turnaround time is -- %f",att/n); 
printf("\nThe Average Waiting time is -- %f ",awt/n);
printf("\n\tPROCESS\t BURST TIME \t WAITING TIME\tTURNAROUND TIME\n");
for(i=0;i<n;i++)
printf("\t%d \t %d \t\t %d \t\t %d \n",i+1,ct[i],wa[i],tat[i]); 
getch();}

#include<stdio.h> 
main()
{
int p[20],bt[20],pri[20], wt[20],tat[20],i, k, n, temp; float wtavg, 
tatavg;
clrscr();
printf("Enter the number of processes --- "); 
scanf("%d",&n);
for(i=0;i<n;i++){
p[i] = i;
printf("Enter the Burst Time & Priority of Process %d --- ",i); scanf("%d
%d",&bt[i], &pri[i]);
}
for(i=0;i<n;i++) 
for(k=i+1;k<n;k++) 
if(pri[i] > pri[k]){
temp=p[i]; 
p[i]=p[k]; 
p[k]=temp;
temp=bt[i]; 
bt[i]=bt[k]; 
bt[k]=temp;
temp=pri[i]; 
pri[i]=pri[k]; 
pri[k]=temp;
}
wtavg = wt[0] = 0; 
tatavg = tat[0] = bt[0]; 
for(i=1;i<n;i++)
{
wt[i] = wt[i-1] + bt[i-1];
tat[i] = tat[i-1] + bt[i];
wtavg = wtavg + wt[i]; 
tatavg = tatavg + tat[i];
}
printf("\nPROCESS\t\tPRIORITY\tBURST TIME\tWAITING TIME\tTURNAROUND 
TIME");
for(i=0;i<n;i++)
printf("\n%d \t\t %d \t\t %d \t\t %d \t\t %d ",p[i],pri[i],bt[i],wt[i],tat[i]); 
printf("\nAverage Waiting Time is --- %f",wtavg/n); printf("\nAverage 
Turnaround Time is --- %f",tatavg/n);
getch();}

#include<stdio.h>
#include<sys/types.h>
#include<unistd.h>
int main()
{
printf("hello siet!\n PID=%d\n",get pid());
return0
}

#include<stdio.h>
#include<stdlib.h>
#include<sys/wait.h>
#include<unistd.h>
int main()
{
pid_t cpid;
if(fork()==0)
exit(0);
else
cpid=(wait(NULL));
printf("parent pid=%d\n",getpid());
printf("child pid = %d\n",cpid);
return 0;
}

#include<stdio.h>
#include<unistd.h>
#include<stdlib.h>
int main(int argc, char*argv[])
{
printf("PID of ex1.c=%d\n",getpid();
char*args[]={"Hello","Neso","SIET","NULL"};
execv("./e*2",args);
printf("Back to ex1.c");
return 0;
}

#include<stdio.h>
#include<unistd.h>
#include<stdlib.h>
int main(int argc, char*argv[])
{
printf("We are in ex2.c=%d\n");
printf("PID of ex2.c=%d\n",getpid());
return 0;
}

PROGRAM
#include<stdio.h> 
void main()
{
int buffer[10], bufsize, in, out, produce, consume, 
choice=0; in = 0;
out = 0;
bufsize = 10;
while(choice !=3)
{
printf(“\n1. Produce \t 2. Consume \t3. Exit”); 
printf(“\nEnter your choice: ”);
scanf(“%d”,&choice); 
switch(choice) {
case 1: if((in+1)%bufsize==out)
printf(“\nBuffer is Full”);
else
{
printf(“\nEnter the value: “);
scanf(“%d”, &produce); 
buffer[in] = produce;
in = (in+1)%bufsize;
}
break;

case 2: if(in == out)
printf(“\nBuffer is Empty”);
else
{
consume = buffer[out];
printf(“\nThe consumed value is %d”, consume); 
out = (out+1)%bufsize;
}
break;
} } 
}

OUTPUT
1. Produce 2. Consume 3. Exit 
Enter your choice: 2
Buffer is Empty
1. Produce 2. Consume 3. Exit 
Enter your choice: 1
Enter the value: 100
1. Produce 2. Consume 3. Exit 
Enter your choice: 2
The consumed value is 100
1. Produce 2. Consume 3. Exit 
Enter your choice: 3

#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <unistd.h>

#define FIFO_FILE "myfifo"

int main() {
    // Create a FIFO (named pipe)
    mkfifo(FIFO_FILE, S_IRUSR | S_IWUSR);

    // Writer Process
    if (fork() == 0) {
        int fd = open(FIFO_FILE, O_WRONLY);
        if (fd == -1) {
            perror("open");
            exit(EXIT_FAILURE);
        }

        // Write data to the FIFO
        char message[] = "Hello from the writer process!";
        write(fd, message, sizeof(message));

        // Close the file descriptor
        close(fd);

        exit(EXIT_SUCCESS);
    }

    // Reader Process
    else {
        int fd = open(FIFO_FILE, O_RDONLY);
        if (fd == -1) {
            perror("open");
            exit(EXIT_FAILURE);
        }

        // Read data from the FIFO
        char buffer[100];
        read(fd, buffer, sizeof(buffer));
        printf("Reader Process: Received message - %s\n", buffer);

        // Close the file descriptor
        close(fd);

        // Remove the FIFO
        unlink(FIFO_FILE);

        exit(EXIT_SUCCESS);
    }

    return 0;
}

#include<stdio.h> 
#include<string.h> 
void main()
{
int alloc[10][10],max[10][10]; 
int avail[10],work[10],total[10]; 
int i,j,k,n,need[10][10];
int m;
int count=0,c=0; 
char finish[10]; 
printf("Enter the no. of processes and resources:"); 
scanf("%d%d",&n,&m);
for(i=0;i<=n;i++) 
finish[i]='n';
printf("Enter the claim matrix:\n"); 
for(i=0;i<n;i++)
for(j=0;j<m;j++) 
scanf("%d",&max[i][j]);
printf("Enter the allocation matrix:\n"); 
for(i=0;i<n;i++)
for(j=0;j<m;j++) 
scanf("%d",&alloc[i][j]); 
printf("Resource vector:"); 
for(i=0;i<m;i++) 
scanf("%d",&total[i]); 
for(i=0;i<m;i++)
avail[i]=0; for(i=0;i<n;i++)
for(j=0;j<m;j++) 
avail[j]+=alloc[i][j]; 
for(i=0;i<m;i++)
work[i]=avail[i]; 
for(j=0;j<m;j++) 
work[j]=total[j]-work[j]; 
for(i=0;i<n;i++) 
for(j=0;j<m;j++)
need[i][j]=max[i][j]-alloc[i][j]; 
A:
for(i=0;i<n;i++)
{
c=0;
for(j=0;j<m;j++) 
if((need[i][j]<=work[j])&&(finish[i]=='n'))
c++;
if(c==m)
{
printf("All the resources can be allocated to Process %d", i+1);
printf("\n\nAvailable resources are:"); 
for(k=0;k<m;k++)
{
work[k]+=alloc[i][k];
printf("%4d",work[k]);
}
printf("\n");
finish[i]='y';
printf("\nProcess %d executed?:%c \n",i+1,finish[i]); 
count++;
}
}
if(count!=n) 
goto A;
else
printf("\n System is in safe mode"); 
printf("\n The given state is safe state"); 
}

#include <stdio.h>
 #include <unistd.h> 
#include <stdlib.h> 

main(void) 
{ 
pid\_t pid = 0; 
pid = fork(); 
if (pid == 0)
 { 
printf("I am the child.\\n"); 
} if (pid > 0)
 { printf("I am the parent, the child is %d.\\n", pid); 
} 
if (pid < 0) 
{ 
perror("In fork():");
 } 
exit(0); 
} 








